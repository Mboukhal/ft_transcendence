version: "3.8"

services:
  # Database -------------------------------------------------------------------------------------------------
  database:
    image: postgres:15-alpine
    container_name: $DATABASE_HOST
    restart: always
    expose: [$DATABASE_PORT]
    ports: [$DATABASE_PORT:$DATABASE_PORT] # for development only
    volumes: [database-data:/var/lib/postgresql/data]
    networks: [app-network]
    environment:
      POSTGRES_USER: $DATABASE_USER
      POSTGRES_PASSWORD: $DATABASE_PASSWORD
      POSTGRES_DB: $DATABASE_NAME
      PGPORT: $DATABASE_PORT
    healthcheck:
      test: pg_isready -U $DATABASE_USER -d $DATABASE_NAME
      interval: 2s
      retries: 2
      start_period: 1s
  # pgAdmin -------------------------------------------------------------------------------------------------
  database-client:
    depends_on:
      database:
        condition: service_healthy
    image: dbeaver/cloudbeaver:23.0.4
    container_name: $DATABASE_CLIENT_HOST
    restart: always
    expose: [$DATABASE_CLIENT_PORT]
    ports: [$DATABASE_CLIENT_PORT:$DATABASE_CLIENT_PORT]
    networks: [app-network]
    volumes: [database-client-data:/opt/cloudbeaver/data]
    healthcheck:
      test: curl --fail http://localhost:$DATABASE_CLIENT_PORT
      interval: 2s
      retries: 2
      start_period: 1s
  # Backend -------------------------------------------------------------------------------------------------
  backend:
    depends_on:
      database:
        condition: service_healthy
    build: ./backend
    image: backend
    container_name: $BACKEND_HOST
    restart: always
    networks: [app-network]
    expose: [$BACKEND_PORT]
    ports: [$BACKEND_PORT:$BACKEND_PORT]
    environment:
      BACKEND_PORT: $BACKEND_PORT
      DATABASE_URL: "postgres://$DATABASE_USER:$DATABASE_PASSWORD@$DATABASE_HOST:$DATABASE_PORT/$DATABASE_NAME"
      JWT_SECRET: $JWT_SECRET
    healthcheck:
      test: npm run test:e2e
      interval: 2s
      retries: 2
      start_period: 1s
  # Frontend ------------------------------------------------------------------------------------------------
  frontend:
    depends_on:
      backend:
        condition: service_healthy
    build: ./frontend
    image: frontend
    container_name: $FRONTEND_HOST
    restart: always
    networks: [app-network]
    expose: [$FRONTEND_PORT]
    ports: [$FRONTEND_PORT:$FRONTEND_PORT]
    healthcheck:
      test: curl --fail www.google.com # TODO: add real test
      interval: 2s
      retries: 2
      start_period: 1s

volumes:
  database-data:
    name: database-data
  database-client-data:
    name: database-client-data

networks:
  app-network:
    name: app-network