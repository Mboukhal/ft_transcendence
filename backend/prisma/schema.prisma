generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String            @id @default(uuid())
  intraId                 Int               @unique
  createdAt               DateTime          @default(now())

  profile                 UserProfile       @relation(fields: [profileId], references: [id])
  profileId               String            @unique

  preferences             UserPreferences   @relation(fields: [preferencesId], references: [id])
  preferencesId           String            @unique

  sensitiveData           UserSensitiveData @relation(fields: [sensitiveDataId], references: [id])
  sensitiveDataId         String            @unique

  friends                 User[]            @relation("friends")
  friendOf                User[]            @relation("friends")

  friendRequestsSent      FriendRequest[]   @relation("friendRequestsSent")
  friendRequestsReceived  FriendRequest[]   @relation("friendRequestsReceived")
}

enum UserStatus {
  ONLINE
  PLAYING
  OFFLINE
}

model UserProfile {
  id        String    @id @default(uuid())
  updatedAt DateTime  @default(now())

  name      String     @unique
  status    UserStatus @default(OFFLINE)

  user      User?
}

model FriendRequest {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())

  sender      User      @relation("friendRequestsSent", fields: [senderId], references: [id])
  senderId    String

  receiver    User      @relation("friendRequestsReceived", fields: [receiverId], references: [id])
  receiverId  String

  @@unique([senderId, receiverId], name: "senderToReceiver")
}

model UserPreferences {
  id                                String    @id @default(uuid())
  updatedAt                         DateTime  @default(now())

  isTwoFactorAuthenticationEnabled  Boolean   @default(false)

  user                              User?
}

model UserSensitiveData {
  id                            String    @id @default(uuid())
  updatedAt                     DateTime  @default(now())

  twoFactorAuthenticationSecret String?
  iv                            String?

  user                          User?
}