generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ONLINE
  OFFLINE
}

model User {
  id                      String            @id @default(uuid())
  intraId                 Int               @unique
  createdAt               DateTime          @default(now())

  profile                 UserProfile?
  preferences             UserPreferences?
  sensitiveData           UserSensitiveData?

  friends                 Friendship[]      @relation(name: "UserToFriendship")
  friendsOf               Friendship[]      @relation(name: "FriendshipToUser")
}

model UserProfile {
  updatedAt DateTime                        @default(now())

  name      String                          @unique
  status    UserStatus                      @default(OFFLINE)

  user      User                            @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String                          @id

  freindRequestsSent      FriendRequest[]   @relation(name: "UserProfileToFriendRequest")
  friendRequestsReceived  FriendRequest[]   @relation(name: "FriendRequestToUserProfile")
}

model UserPreferences {
  updatedAt                         DateTime  @default(now())

  isTwoFactorAuthenticationEnabled  Boolean   @default(false)

  user                              User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                            String    @id
}

model UserSensitiveData {
  updatedAt                     DateTime  @default(now())

  twoFactorAuthenticationSecret String?
  iv                            String?

  user                          User      @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId                        String    @id
}

model Friendship {
  createdAt DateTime                        @default(now())

  user      User                            @relation(name: "UserToFriendship", fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId    String

  friend    User                            @relation(name: "FriendshipToUser", fields: [friendId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  friendId  String

  @@id([userId, friendId], name: "FriendshipUniqueConstraint")
}

model FriendRequest {
  createdAt           DateTime          @default(now())

  senderProfile       UserProfile       @relation("UserProfileToFriendRequest", fields: [senderId], references: [userId])
  senderId            String

  receiverProfile     UserProfile       @relation("FriendRequestToUserProfile", fields: [receiverId], references: [userId])
  receiverId          String

  @@id([senderId, receiverId], name: "FriendRequestUniqueConstraint")
}